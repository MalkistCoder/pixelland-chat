// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type AppBadgesConnection struct {
	PageInfo *PageInfo        `json:"pageInfo"`
	Edges    []*AppBadgesEdge `json:"edges"`
}

type AppBadgesEdge struct {
	Cursor string `json:"cursor"`
	Node   *Badge `json:"node"`
}

type Author struct {
	ID         uuid.UUID `json:"id"`
	UserID     uuid.UUID `json:"userId"`
	InstanceID uuid.UUID `json:"instanceId"`
	Roles      []Role    `json:"roles"`
	Name       string    `json:"name"`
	Avatar     string    `json:"avatar"`
	Bio        string    `json:"bio"`
	CreatedAt  time.Time `json:"createdAt"`
	BanReason  *string   `json:"banReason,omitempty"`
}

type BadgeInput struct {
	Name string `json:"name"`
	Icon string `json:"icon"`
}

type ChannelInput struct {
	Name       string    `json:"name"`
	InstanceID uuid.UUID `json:"instanceId"`
	Publishers []Role    `json:"publishers"`
	Readers    []Role    `json:"readers"`
	IsCategory bool      `json:"isCategory"`
}

type ChannelMessagesConnection struct {
	PageInfo *PageInfo              `json:"pageInfo"`
	Edges    []*ChannelMessagesEdge `json:"edges"`
}

type ChannelMessagesEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Message `json:"node"`
}

type ChannelReorderInput struct {
	PrevChannelID *uuid.UUID `json:"prevChannelId,omitempty"`
}

type InstanceAuthorsConnection struct {
	PageInfo *PageInfo              `json:"pageInfo"`
	Edges    []*InstanceAuthorsEdge `json:"edges"`
}

type InstanceAuthorsEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Author `json:"node"`
}

type InstanceChannelsConnection struct {
	PageInfo *PageInfo               `json:"pageInfo"`
	Edges    []*InstanceChannelsEdge `json:"edges"`
}

type InstanceChannelsEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Channel `json:"node"`
}

type InstanceInput struct {
	ID           *uuid.UUID `json:"id,omitempty"`
	Name         string     `json:"name"`
	ReadAccess   Access     `json:"readAccess"`
	Icon         string     `json:"icon"`
	Description  string     `json:"description"`
	ShowAuthor   bool       `json:"showAuthor"`
	ShowChat     bool       `json:"showChat"`
	ShowComments bool       `json:"showComments"`
	ShowLikes    bool       `json:"showLikes"`
}

type InstanceLikesConnection struct {
	PageInfo *PageInfo            `json:"pageInfo"`
	Edges    []*InstanceLikesEdge `json:"edges"`
}

type InstanceLikesEdge struct {
	Cursor  string    `json:"cursor"`
	LikedAt time.Time `json:"likedAt"`
	Node    *Author   `json:"node"`
}

type InstancePinInput struct {
	Pinned bool `json:"pinned"`
}

type InstanceReorderInput struct {
	PrevInstanceID *uuid.UUID `json:"prevInstanceId,omitempty"`
}

type InviteInput struct {
	InstanceID  uuid.UUID  `json:"instanceId"`
	ExpiresAt   *time.Time `json:"expiresAt,omitempty"`
	Redemptions *int       `json:"redemptions,omitempty"`
}

type MessageInput struct {
	Text             string     `json:"text"`
	ChannelID        uuid.UUID  `json:"channelId"`
	RepliedMessageID *uuid.UUID `json:"repliedMessageId,omitempty"`
}

type Notice struct {
	Kind                  NoticeKind             `json:"kind"`
	ChannelMessagesEdge   *ChannelMessagesEdge   `json:"channelMessagesEdge,omitempty"`
	UserInstancesEdge     *UserInstancesEdge     `json:"userInstancesEdge,omitempty"`
	InstanceChannelsEdge  *InstanceChannelsEdge  `json:"instanceChannelsEdge,omitempty"`
	InstanceLikesEdge     *InstanceLikesEdge     `json:"instanceLikesEdge,omitempty"`
	UserNotificationsEdge *UserNotificationsEdge `json:"userNotificationsEdge,omitempty"`
	Instance              *Instance              `json:"instance,omitempty"`
	User                  *User                  `json:"user,omitempty"`
	Author                *Author                `json:"author,omitempty"`
	Badge                 *Badge                 `json:"badge,omitempty"`
}

type PageInfo struct {
	HasPreviousPage bool `json:"hasPreviousPage"`
	HasNextPage     bool `json:"hasNextPage"`
}

type UserBadgesConnection struct {
	PageInfo *PageInfo         `json:"pageInfo"`
	Edges    []*UserBadgesEdge `json:"edges"`
}

type UserBadgesEdge struct {
	Cursor   string    `json:"cursor"`
	Node     *Badge    `json:"node"`
	Count    int       `json:"count"`
	BadgedAt time.Time `json:"badgedAt"`
}

type UserInput struct {
	Name   string `json:"name"`
	Avatar string `json:"avatar"`
	Bio    string `json:"bio"`
}

type UserInstancesConnection struct {
	PageInfo *PageInfo            `json:"pageInfo"`
	Edges    []*UserInstancesEdge `json:"edges"`
}

type UserInstancesEdge struct {
	Cursor       string    `json:"cursor"`
	Node         *Instance `json:"node"`
	InstanceUser *Author   `json:"instanceUser"`
	LikedByMe    bool      `json:"likedByMe"`
	Rank         string    `json:"rank"`
	Pinned       bool      `json:"pinned"`
}

type UserNotificationsConnection struct {
	PageInfo  *PageInfo                `json:"pageInfo"`
	Edges     []*UserNotificationsEdge `json:"edges"`
	HasUnread bool                     `json:"hasUnread"`
}

type UserNotificationsEdge struct {
	Cursor string        `json:"cursor"`
	Node   *Notification `json:"node"`
}

type Access string

const (
	AccessPublic  Access = "PUBLIC"
	AccessPrivate Access = "PRIVATE"
)

var AllAccess = []Access{
	AccessPublic,
	AccessPrivate,
}

func (e Access) IsValid() bool {
	switch e {
	case AccessPublic, AccessPrivate:
		return true
	}
	return false
}

func (e Access) String() string {
	return string(e)
}

func (e *Access) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Access(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Access", str)
	}
	return nil
}

func (e Access) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NoticeKind string

const (
	NoticeKindMessageAdded      NoticeKind = "MESSAGE_ADDED"
	NoticeKindMessageRemoved    NoticeKind = "MESSAGE_REMOVED"
	NoticeKindChannelAdded      NoticeKind = "CHANNEL_ADDED"
	NoticeKindChannelUpdated    NoticeKind = "CHANNEL_UPDATED"
	NoticeKindChannelRemoved    NoticeKind = "CHANNEL_REMOVED"
	NoticeKindAuthorUpdated     NoticeKind = "AUTHOR_UPDATED"
	NoticeKindUserUpdated       NoticeKind = "USER_UPDATED"
	NoticeKindInstanceUpdated   NoticeKind = "INSTANCE_UPDATED"
	NoticeKindInstanceRemoved   NoticeKind = "INSTANCE_REMOVED"
	NoticeKindLikeAdded         NoticeKind = "LIKE_ADDED"
	NoticeKindLikeRemoved       NoticeKind = "LIKE_REMOVED"
	NoticeKindNotificationAdded NoticeKind = "NOTIFICATION_ADDED"
	NoticeKindBadgeAdded        NoticeKind = "BADGE_ADDED"
)

var AllNoticeKind = []NoticeKind{
	NoticeKindMessageAdded,
	NoticeKindMessageRemoved,
	NoticeKindChannelAdded,
	NoticeKindChannelUpdated,
	NoticeKindChannelRemoved,
	NoticeKindAuthorUpdated,
	NoticeKindUserUpdated,
	NoticeKindInstanceUpdated,
	NoticeKindInstanceRemoved,
	NoticeKindLikeAdded,
	NoticeKindLikeRemoved,
	NoticeKindNotificationAdded,
	NoticeKindBadgeAdded,
}

func (e NoticeKind) IsValid() bool {
	switch e {
	case NoticeKindMessageAdded, NoticeKindMessageRemoved, NoticeKindChannelAdded, NoticeKindChannelUpdated, NoticeKindChannelRemoved, NoticeKindAuthorUpdated, NoticeKindUserUpdated, NoticeKindInstanceUpdated, NoticeKindInstanceRemoved, NoticeKindLikeAdded, NoticeKindLikeRemoved, NoticeKindNotificationAdded, NoticeKindBadgeAdded:
		return true
	}
	return false
}

func (e NoticeKind) String() string {
	return string(e)
}

func (e *NoticeKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NoticeKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NoticeKind", str)
	}
	return nil
}

func (e NoticeKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationKind string

const (
	NotificationKindLikeAdded    NotificationKind = "LIKE_ADDED"
	NotificationKindCommentAdded NotificationKind = "COMMENT_ADDED"
	NotificationKindReplyAdded   NotificationKind = "REPLY_ADDED"
	NotificationKindBadgeAdded   NotificationKind = "BADGE_ADDED"
)

var AllNotificationKind = []NotificationKind{
	NotificationKindLikeAdded,
	NotificationKindCommentAdded,
	NotificationKindReplyAdded,
	NotificationKindBadgeAdded,
}

func (e NotificationKind) IsValid() bool {
	switch e {
	case NotificationKindLikeAdded, NotificationKindCommentAdded, NotificationKindReplyAdded, NotificationKindBadgeAdded:
		return true
	}
	return false
}

func (e NotificationKind) String() string {
	return string(e)
}

func (e *NotificationKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationKind", str)
	}
	return nil
}

func (e NotificationKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin     Role = "ADMIN"
	RoleModerator Role = "MODERATOR"
	RoleMember    Role = "MEMBER"
	RoleBanned    Role = "BANNED"
	RoleAllUsers  Role = "ALL_USERS"
)

var AllRole = []Role{
	RoleAdmin,
	RoleModerator,
	RoleMember,
	RoleBanned,
	RoleAllUsers,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleModerator, RoleMember, RoleBanned, RoleAllUsers:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
